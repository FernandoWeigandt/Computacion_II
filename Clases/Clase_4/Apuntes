1. Conceptos Fundamentales de Pipes üß†
	‚Ä¢	Pipes son mecanismos de comunicaci√≥n entre procesos en sistemas operativos. Permiten que los datos se transfieran de un proceso a otro de forma eficiente, utilizando un canal unidireccional.
	‚Ä¢	Son fundamentales en la programaci√≥n concurrente, permitiendo que los procesos trabajen de manera coordinada sin tener que acceder directamente a la memoria compartida.

2. Ciclo de Vida de un Pipe üîÑ
	‚Ä¢	Creaci√≥n: Usamos os.pipe() para crear un pipe, que devuelve una tupla con dos descriptores de archivo: uno para lectura y otro para escritura.
	‚Ä¢	Lectura/Escritura: Los procesos pueden escribir y leer datos en los pipes. Es importante que cada proceso cierre los extremos que no utiliza, para evitar bloqueos.
	‚Ä¢	Cierre: Cuando el proceso ya no necesita el pipe, debe cerrar los extremos que no usa para liberar los recursos del sistema.

3. Implementaci√≥n en Python üíª
	‚Ä¢	Usamos funciones como os.pipe() para crear el pipe y os.fork() para crear un proceso hijo.
	‚Ä¢	El proceso hijo y el padre pueden intercambiar datos a trav√©s del pipe, utilizando os.write() y os.read().
	‚Ä¢	La comunicaci√≥n entre procesos puede ser unidireccional o bidireccional. Para la comunicaci√≥n bidireccional, se pueden crear dos pipes.

4. Deadlocks y Prevenci√≥n üö´
	‚Ä¢	Deadlock: Ocurre cuando dos o m√°s procesos se bloquean esperando el uno al otro. Esto puede suceder si los extremos de los pipes no se manejan correctamente.
	‚Ä¢	Prevenci√≥n:
	‚Ä¢	Aseg√∫rate de cerrar los extremos del pipe que no se usan.
	‚Ä¢	Organiza los procesos de forma que no haya ciclos de dependencia, es decir, que un proceso no espere una respuesta de otro que a su vez espera del primero.
	‚Ä¢	Usa timeouts o controles de flujo para evitar bloqueos si el pipe est√° lleno.

5. Ejemplos Pr√°cticos üß™
	‚Ä¢	Vimos ejemplos donde un proceso escribe y otro lee a trav√©s de un pipe. Tambi√©n analizamos c√≥mo se bloquea un proceso si intenta leer de un pipe vac√≠o o escribir en un pipe lleno.
	‚Ä¢	Adem√°s, exploramos un ejemplo de deadlock simple, donde dos procesos esperan el uno al otro y nunca pueden completar su tarea.

6. Patrones de Comunicaci√≥n Avanzados üîÑ
	‚Ä¢	Se explic√≥ c√≥mo encadenar m√∫ltiples procesos conectando pipes entre ellos, lo que permite construir un pipeline, donde la salida de un proceso se convierte en la entrada del siguiente.
	‚Ä¢	La comunicaci√≥n bidireccional, aunque m√°s compleja, permite una interacci√≥n m√°s fluida entre los procesos.
